---
layout: post
title: Regular Expression Denial of Service.
categories: [Research]
tags: [REGULAR-EXPRESSION,DOS]
description: Something about Regular expression DoS.
---

## 0x00 Một số thứ liên quan tới tiêu đề bài viết

Thi thoảng mình vẫn hay lướt [Security Lab](https://securitylab.github.com/) để đọc những bài nghiên cứu, thì có dạo mình đọc qua [GHSL-2021-098: ReDoS in OpenProject - CVE-2021-32763](https://securitylab.github.com/advisories/GHSL-2021-098-opf-openproject/) . Lỗi này mô tả chi tiết sản phầm [OpenProject](https://www.openproject.org/) bị khai thác [DoS](https://en.wikipedia.org/wiki/Denial-of-service_attack),thông qua việc so khớp chuỗi với **patern regex** không chặt chẽ hay còn gọi là **evil regex**. Từ khoá **ReDoS** mình cũng thấy vài lần nhưng tự vã vào mặt mình mà nói thì mình đơn thuần chỉ nghĩ nó là **Bypass DoS** của một lỗi nào trước đây mà thôi. Nhưng sự thật thì **ReDoS** là cách viết ngắn gọn **R**egular-**e**xpression-**D**enial-**o**f-**S**ervice.

![Stop acting so stupid! | Reaction Images | Know Your Meme](https://i.kym-cdn.com/photos/images/newsfeed/000/555/907/765.gif)

Trước khi nói chi tiết vào cách mà **ReDoS** hoạt động thì mình sẽ nói lại một chút về [NFA(Nondeterministic finite automaton)](https://en.wikipedia.org/wiki/Nondeterministic_finite_automaton) và [DFA(Deterministic_finite_automaton)](https://en.wikipedia.org/wiki/Deterministic_finite_automaton). 

> **NFA/DFA** là 2 hàm chuyển đổi trạng thái nhận vào **Q** tập hợp hữu hạn các trạng thái,**∑** là bảng chữ - tập các ký tự vào, **q0** là trạng thái bắt đầu và cho ra tập **F**  trạng thái kết thúc(trạng thái thành công). 

Mình sẽ không giải thích nhiều về phần này, các bạn có thể tham khảo thêm tại [bài giảng](https://www.slideshare.net/cumeo89/l-thuyt-tnh-ton-bkhn-3) này. Ngoài ra nếu muốn tìm hiểu sâu hơn thì có thể xem qua [what-is-the-enlightenment-im-supposed-to-attain-after-studying-finite-automata](https://qastack.vn/cstheory/14811/what-is-the-enlightenment-im-supposed-to-attain-after-studying-finite-automata). Tiêu đề khá hài nhưng mình rất thích đọc các bài viết hỏi đáp và tranh luận như này. Hai đặc điểm chính của **NFA/DFA** có liên quan đến phần tiếp theo:

*<u>NFA:</u>*

> - Hàm chuyển ánh xạ: **Q** x **∑** ➙ **2^Q**. Tức ứng với một trạng thái và một kí tự nhập, có thể có **không**, **một** hoặc **nhiều** phép chuyển trạng thái 
> - Chấp nhận ε (kí hiệu rỗng)

​       Trả lời cho câu hỏi ε là gì tại đây : [What-is-ε-NFA](https://www.quora.com/What-is-%CE%B5-NFA) hoặc [Epsilon NFA](https://www.youtube.com/watch?v=84oNUttWlN4)

```
ε(epsilon) giúp chuyển đổi trạng thái mà không cần kí tự đầu vào, chuyển tiếp từ trạng thái q(a) sang trạng thái q(b) như một chuỗi rỗng.
```

*<u>DFA:</u>*

> * Hàm chuyển ánh xạ: **Q** x **∑** ➙ **Q**. Tức ứng với một trạng thái và một kí tự nhập, chỉ có thể có **một** phép chuyển trạng thái.
> * Không chấp nhận ε (kí hiệu rỗng)

> Trạng thái trong DFA là tập hợp con của các trạng thái trong NFA

## 0x01 Cách ReDoS hoạt động

Hiện nay, hầu hết các bộ máy regular expression trong các ngôn ngữ lập trình đều tuân theo [thuật toán của Ken Thompson's](https://en.wikipedia.org/wiki/Thompson%27s_construction) để xây dựng NFA từ một regular expression. Kết quả trả về từ bộ máy này là trạng thái thành công với chuỗi kí tự khớp, hoặc một trạng thái rỗng khi NFA đã duyệt qua hết tất cả những trạng thái có thể xảy ra trong tập hợp các trạng thái mà không có có một chuỗi khớp nào.

<u>*Ví dụ 1: *</u>Một ví dụ về các đường đi trạng thái từ cùng một mẫu regular expression `a(b|c)e` và chuỗi đầu vào `abe` giữa **NFA** và **DFA** bởi [fsm_simulator](http://ivanzuzak.info/noam/webapps/fsm_simulator/):

![dfa](https://user-images.githubusercontent.com/32236617/131471914-062343c4-3601-4ac3-bece-f359fdf675d5.gif)

​                                                                                       *Ví dụ 1:DFA Transition graph*

![nfa](https://user-images.githubusercontent.com/32236617/131472286-8c939c8c-caf5-41f2-9f96-37b19ea86a2d.gif)

​                                                                                           *Ví dụ 1:NFA Transition graph*

Biểu đồ duyệt trạng thái NFA trên vẫn còn quá đơn giản đối với khả năng xử lý của máy tính. Ví dụ tiếp theo đây mình sẽ giải thích về `backtracking`, quay lùi cho đến khi tìm trạng thái được chấp nhận hoặc đã duyệt qua tất cả những thái có thể xảy ra.

<u>*Ví dụ 2:*</u> Tập trạng thái đầu vào gồm `{acgf,acdf}`. Trạng thái kết thúc thành công là `acdf`, bộ máy sẽ xử lý như thế nào?

*Tóm tắt:*

* Gồm 2 đường đi trạng thái
* Nút bắt đầu là nút `0` ứng với kí tự bắt đầu `a`
* Nút kết thúc là `4` ứng với kí tự kết thúc là `f`



![image](https://user-images.githubusercontent.com/32236617/131476224-3502e189-61e3-43a0-b5f1-37689d19175e.png)

​                                                                               *Ví dụ 2: Đường đi không khớp mẫu*

Đầu tiên cả 2 đường đi trạng thái này đều đi đến nút `2` và `6` với các trạng thái của 2 đường đi này đều giống nhau.Sau đó đường trạng thái bên trên bắt đầu duyệt qua nút `3` với kí tự `g`. Kí tự `g` không nằm trong trạng thái cho phép `acdf`.

[❌](https://emojipedia.org/cross-mark/)*Kết thúc đường trạng thái tại nút này và xem như trạng thái thất bại là `acgf`.*

![image](https://user-images.githubusercontent.com/32236617/131476496-17257736-8a6c-41c5-bfa9-6245cc8f3bd4.png)

​                                                                               *Ví dụ 2: Đường đi không khớp mẫu*

Lúc này, `backtracking` hoạt động, bắt đầu lùi lại nút nơi cuối cùng khi 2 nút có trạng thái tương đồng trên cả 2 đường đi tức `2` và `6`. Nút `2` đã bị loại ở bước trên, nên thực hiện duyệt tiếp từ nút `6`. Duyệt đến nút `7` là kí tự `d` khớp với trạng thái cho phép và đi tới nút `4` để kết thúc.

[✔️](https://emojipedia.org/check-mark/) *Kết thúc đường trạng thái tại nút này và xem như trạng thái thành công là `acdf`.*

> Hãy thử nghĩ rằng nếu trường hợp tập các trạng thái đầu vào không bao gồm trạng thái kết thúc **thành công**, tập các trạng thái có khoảng **2^n** trạng thái thì CPU sẽ cần bao nhiêu tài nguyên và thời gian để duyệt hết tập trạng thái này?

<u>*Ví dụ 3:*</u> Một tiện ích javascript sử dụng mẫu regular expression `(^Author:|^Co-authored-by:)\s+(?<author>[^<]+)\s+(?<email><[^>]+>)` với chức năng lấy ra lấy ra các chuỗi khớp với tên, địa chỉ email của người người dùng. Liệu nó có an toàn không?

Sử dụng chức năng [debugger regex101.com](https://regex101.com/debugger) để có thể xem các bước duyệt chuỗi khớp mẫu.

* Trường hợp thứ nhất, chuỗi nhập vào trả về trạng thái cho phép (khớp): `Author: dangkhai0x21 <dangkhai0x21@gmail.com>`

![match](https://user-images.githubusercontent.com/32236617/131513732-60bd7d47-854c-4015-ab64-3b6d59ed622b.gif)

​                                                                           *Ví dụ 3: chuỗi so khớp mẫu*

Với trường hợp này, cần **23** bước để tìm được chuỗi khớp với mẫu. Với lần duyệt đầu tiên đã tìm được chuỗi khớp.

* Trường hợp thứ hai, chuỗi nhập vào không khớp với mẫu: `Author: dangkhai0x21    <dangkhai0x21@gmail.com`

![notmatch](https://user-images.githubusercontent.com/32236617/131514567-3424d6ba-2d24-4345-9c9b-aaf4e94e1e34.gif)

​                                                                               *Ví dụ 3: chuỗi không so khớp mẫu*

Trường hợp này cần đến 204 bước để xử lý đầu vào này. Kết quả trả về không tìm được chuỗi khớp nào.

So sánh 2 đầu vào:

![image](https://user-images.githubusercontent.com/32236617/132949308-f8ff1d12-186d-4b7c-a6bf-315c4a75db4c.png)

 *Lí do:* 

* `\s+` cho phép có `1` hoặc `nhiều` kí tự **space**.
* Nhóm **group** bắt các kí tự không **chặt chẽ**
* Chuỗi đầu vào **không** bao gồm trạng thái kết thúc **thành công** vì thiếu kí tự `>`.

🔁 Vì nguyên nhân này mà CPU cần xử lý 1 vòng lặp hữu hạn bởi kẻ tấn công có thể tuỳ biến bằng việc thêm hoặc bớt kí tự **space** ở chuỗi đầu vào.

Hãy xem biểu đồ xử lý để dễ hình dung hơn: 

![image](https://user-images.githubusercontent.com/32236617/131606562-eff4915a-5151-4a08-97d1-00de3e25e06f.png)

​                                                               *Ví dụ 3: Biểu đồ duyệt đường khi chuỗi không khớp*

Biểu diễn `[space]` bằng kí tự `[s]` trên biểu đồ. **evil space** là kí tự **space** và kẻ tấn công có thể tuỳ chỉnh. Các kí tự space sẽ được chia làm 2 phần:

* Phần thứ nhất sẽ khớp với nhóm `(?<author>[^<]+)`
* Phần thứ hai sẽ khớp với `\s+`

Hậu quả của việc cho bộ máy regular expression chạy một vòng lặp với n đường đi sẽ như thế nào. Sử dụng trình biên dịch javascript để chạy đoạn mã dưới đây:

```javascript
let regex = /(^Author:|^Co-authored-by:)\s+(?<author>[^<]+)\s+(?<email><[^>]+>)/
t = performance.now()
regex.test('Author: dangkhai0x21' + ' '.repeat(9999) + '<dangkhai0x21@gmail.com')
console.log(performance.now() - t)
```

![image-20210901103932152](https://user-images.githubusercontent.com/32236617/131949698-7c0eba61-d64f-419f-836c-b5b83745e7e8.png)

​                                           *Ví dụ 3: Thời gian trả về khi nhập vào một chuỗi không an toàn sấp xỉ 103 ms*

![image-20210901103959567](https://user-images.githubusercontent.com/32236617/131949727-d6b8050b-6e99-41f6-b528-873190d708c7.png)

​                                               *Ví dụ 3: Thời gian trả về khi nhập vào một chuỗi an toàn là 0 ms*

Nếu bạn thử `repeat(999999999)` thì ...

![Meme Creator - Funny end of month push... Whole computer system crashes..again.  Meme Generator at MemeCreator.org!](https://www.memecreator.org/static/images/memes/4159800.jpg)

Ngoài ra, qua các bản báo cáo chi tiết ở [CVE-2021-27293](https://github.com/restsharp/RestSharp/issues/1556),[ssri_redos](https://doyensec.com/resources/Doyensec_Advisory_ssri_redos.pdf) bạn đọc có thể thông tin về kiểu tấn công này.

## 0X02 ReDoS trong Whitebox


Tìm kiếm nơi có thể xảy ra ReDoS phổ biến hơn trong Whitebox, vì cách thức phát hiện loại tấn công này chủ yếu phân tích các mẫu regular expression từ ứng dụng. Từ đó tìm ra các kí tự `potential` có thể dẫn đến `backtracking`. 

Đã có nhiều nhà nghiên cứu đóng góp các công cụ phân tích mẫu regular expression độc hại có thể phát hiện ra hầu hết các mẫu có khả năng bị khai thác. Ví dụ như:

* [regexploit](https://github.com/doyensec/regexploit) phát triển bở [@doyensec](https://blog.doyensec.com/) hỗ trợ khá nhiều ngôn ngữ như java,javascript,python.c-sharp
* [saferegex](1.https://github.com/jkutner/saferegex) phát triển bởi @jkutner
* ...

> Các công cụ này đã làm tốt công việc của nó là tìm được các mẫu có khả năng gây lỗi đến 80%. Tuy nhiên vẫn bỏ qua một số mẫu phức tạp.

## 0x03 ReDoS trong Blackbox

![wtf you did there I can&#39;t see it - Blind Attack | Meme Generator](https://memegenerator.net/img/instances/75163432.jpg)


Khai thác ReDoS trong Blackbox ít khả hơn so với WhiteBox, vì nó như một kiểu khai thác **mù**. Cách khai thác vẫn chỉ có thể suy đoán các tham số dễ bị tấn công như các trường `email, số điện thoại, session history...`. Các trường mà ứng dụng yêu cầu sự phân biệt rõ ràng bởi kí tự thường, in hoa, số, kí tự đặc biệt. 

Sau khi tìm được các điểm vào có thể khai thác thì lại có 2 cách tấn công có thể dùng:

* Thủ công 100%:
  - Bao gồm 2 bước chính sau khi tìm được đầu vào có khả năng khai thác là đưa ra tập `n` **giả định** mẫu regular expression từ server. Bước tiếp là đưa ra tập `m` chuỗi đầu độc hại để lần lượt khai thác các mẫu giả định kia. Có thể xem là mất `n^m` bước khai thác.
* Semi(thủ công 50%, tự động 50%):
  * **Bỏ qua** bước đưa ra `n` giả định mẫu mà người khai thác sẽ tự gợi ý mẫu regular expression. Sau đó sẽ tự động thực hiện vét cạn `m` chuỗi vào độc hại.

Đối với cách thủ công 100% kia mình sợ rằng chưa kịp tấn công máy chủ thì máy mình đã tự **crash** rồi. Vì vậy mà hiện tại vẫn chưa có công cụ nào khả quan để kiểm tra blackbox.

## 0x04 Ngăn chặn ReDoS

> Làm thế nào để tạo ra mẫu regular expression vừa **linh hoạt** và **an toàn**?

Với người một số bạn chưa có kiến thức bảo mật về phần này đang cố gắng tạo ra một mẫu regular expression dài ngoẵn. Nhằm mục đích bắt được nhiều nhóm, nhiều mục tiêu, bắt nó như một mẫu đa dụng. Nhưng đôi khi sẽ biến tính năng thành lỗ hỏng.

![image](https://user-images.githubusercontent.com/32236617/131681605-05c4c663-7d3b-433f-8685-c69d392cc84d.png)

Vậy làm sao để giải quyết câu hỏi ở trên? Mình sẽ liệt kê một số cách để hạn chế khả năng bị khai thác thông qua mẫu như sau:

* Sử dụng DFA -> An toàn **nhưng** sẽ không linh hoạt vì hạn chế các trạng thái kết thúc.

* Trở thành một người viết mẫu chuẩn 4.0:

  * Đừng **cố** gắng tạo ra một mẫu **regular expression** quá đa nhiệm. Đôi khi sẽ biến tính năng thành lỗ hỏng. *Cố quá sẽ thành quá cố >.<*

  * Nên ràng buộc chiều dài với các kí tự tự do:

    Ví dụ như không sử dụng `\s+` hoặc `\w+` `\d+` mà nên ràng buộc chiều dài `\s{1,3}` `\w{1,3}`

  * Có thể sử dụng **backreferences** để kiểm tra số lần lặp lại của kí tự để loại bỏ các kí tự trùng.

  * Hãy xét thời gian thực hiện cho các lần sử dụng máy regex, nếu trường hợp việc xử lý đầu vào quá lâu thì có thể dừng tiến trình và thông báo chuỗi phức tạp.

  * Sử dụng `*` và `+` đúng lúc đúng chỗ.

  * Bắt chính xác các chuỗi thuộc `group`.

  * Sử dụng các thư viện khác như `strip,trim,replace,...` để làm sạch các đầu vào trước khi dùng đến regular expression.

  * ...

## 0X05 Tài liệu liên quan

[0] [Regular Expression Matching Can Be Simple And Fast (but is slow in Java, Perl, PHP, Python, Ruby, ...)](https://swtch.com/~rsc/regexp/regexp1.html)

[1] [implementing-a-regular-expression-engine](https://deniskyashif.com/2019/02/17/implementing-a-regular-expression-engine/)

[2] [Details of regular expression behavior](https://docs.microsoft.com/en-us/dotnet/standard/base-types/details-of-regular-expression-behavior)

[3] [Construct ∈-NFA of Regular Language L = 0(0+1)*1](https://www.tutorialspoint.com/construct-nfa-of-regular-language-l-0-0plus1-1)

[4] [ReDoS-Attacks](https://www.checkmarx.com/wp-content/uploads/2015/03/ReDoS-Attacks.pdf)

[5] [NFAs and regular expressions](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-045j-automata-computability-and-complexity-spring-2011/lecture-notes/MIT6_045JS11_lec04.pdf)

[6] [regular-expressions.info](https://www.regular-expressions.info/catastrophic.html)

*Nếu có chỗ nào sai hoặc thắc mắc, các bạn hãy gửi email về địa chỉ hòm thư mình đính kèm bên trái trang nhé ^^~*
